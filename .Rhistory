)
mean(c(1,2,3))
evaluate <- function(func, dat){
func(dat)
}
evaluate(sum(c(1,2,3)))
evaluate(sum(c(1,2,3))
evaluate(sum,c(1,2,3))
evaluate <- function(func, dat){
func(dat)
}
my_mean<-function(dat){mean(dat)}
my_sum<-function(dat){sum(dat)}
my_floor<-function(dat){floor(dat)}
evaluate(my_mean,c(1,2,3))
evaluate(my_mean,c(1,2,3))
evaluate(my_sum,c(1,2,3))
evaluate(my_meadian,c(1,2,3))
evaluate(my_median,c(1,2,3))
evaluate(my_meadian,c(1,2,3))
evaluate <- function(func, dat){
func(dat)
}
my_mean<-function(dat){median(dat)}
my_sum<-function(dat){sum(dat)}
my_floor<-function(dat){floor(dat)}
evaluate(my_median,c(1,2,3))
median(1,2,3)
median(c(1,2,3)
)
median(c(1,2,3))
a1<-"sum"
a2<-c(1,2,3)
paste(a1,a2, sep = "")
paste(a1,"(",a2,")", sep = "")
a2<-"c(1,2,3)""
a2<-"c(1,2,3)"
a2<-"c(1,2,3)"
a1
a2
paste(a1,"(",a2,")", sep = "")
evaluate <- function(func, dat){
paste(func,"(",dat,")", sep = "")
}
evaluate(sum,c(1,2,3))
evaluate <- function(func, dat){
func(dat)
}
evaluate(mean,c(1,2,3))
evaluate(sd,c(1,2,3))
evaluate(median,c(1,2,3))
evaluate(sd,c(1,2,3))
x<-c(8, 4, 0)
x
x[1]
x[length(x)]
telegram <- function(...){
paste("START", ...,"STOP",sep=" ",collapse=NULL)
}
telegram("Good Morning")
telegram(Good Morning)
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(place="toronto",adjective="very",noun="Helen")
"%mult_add_one%" <- function(left, right){ # Notice the quotation marks!
left * right + 1
}
`4 %mult_add_one% 5`
4 %mult_add_one% 5
"%p%" <- function(left, right){ paste(left,right,sep=" ",collapse=NULL
}
"%p%" <- function(left, right){
paste(left,right,sep=" ",collapse=NULL)
}
"Good" %p% "job!"
'I', 'love', 'R!'
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
mydt
objets()
objects()
ab<-read.csv("D:/CoursERA/Course2/Assignment1/specdata/174.csv")
ab
head(ab)
cor(ab$sulfate,ab$nitrate)
ab1<-na.omit(ab)
ab1
dim(ab)
dim(ab1)
cor(ab1$sulfate,ab1$nitrate)
ab<-read.csv("D:/CoursERA/Course2/Assignment1/specdata/274.csv")
dim(ab)
ab1<-na.omit(ab)
ab1
cor(ab1$sulfate,ab1$nitrate)
ab<-read.csv("D:/CoursERA/Course2/Assignment1/specdata/302.csv")
dim(ab)
ab1<-na.omit(ab)
ab1
dim(ab1)
cor(ab1$sulfate,ab1$nitrate)
test<-vector("numeric",length=0)
length(test)>0
swirl()
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
swirl()
swirl()
library(devtools)
library(bipglm)
head(cond10)
objects90
objects()
head(cond10)
objects()
log(.5)
log(.01)
rm(list=objects())
makeVector <- function(x = numeric()) {
m <- NULL
print(x)
print(m)
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
print(m)
getmean <- function() m
print(m)
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
print(m)   #####
if(!is.null(m)) {
message("getting cached data")
return(m)
}
print(m)
data <- x$get()
print(data)
m <- mean(data, ...)
print(m)
x$setmean(m)
print(m)
m
}
aa<-makeVector(1:3)
cachemean(aa)
View(cachemean)
cachemean(aa)
View(makeVector)
makeVector <- function(x = numeric()) {
m <- NULL
print(x)
print(m)
get <- function() x
setmean <- function(mean) m <<- mean
print(m)
getmean <- function() m
print(m)
list(get = get,
setmean = setmean,
getmean = getmean)
}
aa<-makeVector(1:5)
cachemean(aa)
cachemean(aa)
ls(environment(aa$setmean))
get("m",environment(aa$setmean))
get("x",environment(aa$setmean))
library(bipglm)
aa<-pindtest(cond7, hrs2B7)
abc<-aa$CountPred
abc<-(round(abc,digits=3))
abc<-cbind(abc,Total=round(apply(abc,1,sum),digits=0))
abc<-rbind(abc,Total=round(apply(abc,2,sum),digits=0))
pindtest<-function(data,result){
mydt<-cbind(data[,1:2],result$Lambdas)
cname<-c(names(mydt)[1:2],"lambda1","lambda2")
colnames(mydt)  <- cname
lam1_tot        <- sum(mydt$lambda1)
lam2_tot        <- sum(mydt$lambda2)
y1_split        <- split(mydt,list(mydt[,1]))
y2_split        <- split(mydt,list(mydt[,2]))
y1_y2_split     <- split(mydt[,c(1:2,4)],list(mydt[,1],mydt[,2]))
y1_mar_prob     <- matrix(sapply(y1_split, function(x) sum(x$lambda1))/lam1_tot,ncol=1)
y2_mar_prob     <- matrix(sapply(y2_split, function(x) sum(x$lambda2))/lam2_tot,nrow=1)
y1_con_sum      <- matrix(sapply(y1_y2_split, function(x) sum(x$lambda2)),nrow=length(y1_mar_prob))
y1_con_mar_sum  <- matrix(apply(y1_con_sum,1,sum),nrow=dim(y1_con_sum)[1],ncol=dim(y1_con_sum)[2])
y1_con_prob     <- y1_con_sum/y1_con_mar_sum
y1_mar_prob_n   <- matrix(y1_mar_prob,nrow=dim(y1_mar_prob)[1],ncol=dim(y1_con_mar_sum)[2])
y1y2_joint_prob <- y1_con_prob*y1_mar_prob_n
y1y2_pred_count <- y1y2_joint_prob*nrow(mydt)
y1y2_obs_count  <- as.matrix(table(mydt[,1],mydt[,2]))
y1y2_obs_prob   <- y1y2_obs_count/nrow(mydt)
rownames(y1_con_prob)     <- rownames(y1y2_obs_count)
colnames(y1_con_prob)     <- colnames(y1y2_obs_count)
rownames(y1y2_joint_prob) <- rownames(y1y2_obs_count)
colnames(y1y2_joint_prob) <- colnames(y1y2_obs_count)
rownames(y1y2_pred_count) <- rownames(y1y2_obs_count)
colnames(y1y2_pred_count) <- colnames(y1y2_obs_count)
print(y1y2_pred_count)
chisqA<- (y1y2_obs_count-y1y2_pred_count)^2/y1y2_pred_count
chisqA1<- sum(chisqA,na.rm=TRUE)
y1value<-as.numeric(rownames(chisqA))
if(y1value[1]==0){
chisqADim<-dim(chisqA)
chisqAR<-chisqA[2:chisqADim[1],]
print(chisqAR)
chigfdf<-(dim(chisqAR)[1]*dim(chisqAR)[2]+1)-(dim(chisqAR)[1]+1)
} else {
chigfdf<- nrow(y1y2_pred_count)*ncol(y1y2_pred_count)-(nrow               (y1y2_pred_count)+1)
}
chisqA1_prob<-pchisq(chisqA1, chigfdf, ncp = 0, lower.tail = FALSE, log.p = FALSE)
chiq_res<-data.frame("Chi-square" = chisqA1, "D.F" = chigfdf, "p-value" = chisqA1_prob)
list_res<-list("ConProbPred" = y1_con_prob, "JointProbPred"=y1y2_joint_prob,
"JointProbObs"=y1y2_obs_prob, "ObsCount"= y1y2_obs_count,
"CountPred"=y1y2_pred_count,"ChisqInd"=chisqA,"ProbY1Pred"=y1_mar_prob,
"ProbY2Pred"=y2_mar_prob, "ChisquareModel" =chiq_res)
return(list_res)
}
aa<-pindtest(cond7, hrs2B7)
abc<-aa$CountPred
abc<-(round(abc,digits=3))
abc<-cbind(abc,Total=round(apply(abc,1,sum),digits=0))
abc<-rbind(abc,Total=round(apply(abc,2,sum),digits=0))
objects()
library(bipglm)
Ukd4_Red3<-bipmodels(ukd4[,1:2],951,matrix(.01,nrow=2,ncol=1),mtype=-3,presc=1000)
library(knitr)
library(scales)
x = 1995:2005
y = c(81.1, 83.1, 84.3, 85.2, 85.4, 86.5,
88.3, 88.6, 90.8, 91.1, 91.3)
plot.new()
library(manipulate)
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
runif(1)
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(ggplot2)
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
install.packages("UsingR")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
g <- ggplot(long, aes(x = value, fill = variable))
long <- melt(galton)
library(dplyr)
long <- melt(galton)
library(reshape2)
long <- melt(galton)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x-1)
library(datasets)
data(mtcars)
head(mtcars)
lm(mpg~wt,mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
zx <- (x-mean(x)) / sd(x)
zx[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x<-x-mean(x)
y<-y-mean(y)
mean(x)
mean(y)
lm(y~x)
lm(y~x-1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
help(mtcars)
library(knitr)
?sample
sample
Answer
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
pval <- test$p.value
round(pval,3)
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
round(pow, 2)
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- 0.9 #power
n <- power.t.test(power=pow, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$n
ceiling(n/10)*10
library(rsconnect)
library(Rtools)
library(RTools)
install.packages("Rtools")
library(manipulate)
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(datasets)
data(galton)
library(UsingR)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("rChart")
install.packages("rCharts")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("Rcpp")
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
install.packages('devtools'')
install.packages('devtools')
library(devtools)
library(devtools)
install.packages("rCharts")
library(rCharts)
install.packages('rCharts')
require(devtools)
install.packages('devtools')
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
getwd
getwd()
setwd("D:\\CoursERA\\Course9DDP\\BIVP")
library(slidify)
library(devtools)
library(gcc)
install.packages("gcc")
library(RTools)
install.packages("RTools")
getwd
getwd()
setwd(""D:/CoursERA/Course9DDP/BIVP"")
setwd("D:/CoursERA/Course9DDP/BIVP)
setwd("D:/CoursERA/Course9DDP/BIVP")
author("Presentation"")
author("Presentation")
setwd("D:/CoursERA/Course9DDP/BIVP)
setwd("D:/CoursERA/Course9DDP/BIVP")
15*15
install_github("slidifyLibraries",'ramnathv')
library(slidifyLibraries)
slidify("index.Rmd")
getwd()
dir()
setwd("D:\\CoursERA\\Course9DDP\\BIVP\\DDP_Project")
slidify("index.Rmd")
slidify("index.Rmd")
